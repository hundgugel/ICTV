<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AR –ü–ª–∞–Ω—ñ–º–µ—Ç—Ä—ñ—è - –í–Ω—É—Ç—Ä—è–Ω–∫–∞</title>
    <script src="../aframe/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
        }
        
        #modeSelector {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 15px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
        
        .mode-btn {
            margin: 5px;
            padding: 8px 15px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .mode-btn:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
        
        .mode-btn.active {
            background: #FF6B35;
        }
        
        #infoPanel {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 15px;
            border-radius: 10px;
            max-width: 300px;
            backdrop-filter: blur(10px);
        }
        
        .calculation {
            margin: 10px 0;
            padding: 8px;
            background: rgba(76, 175, 80, 0.2);
            border-left: 3px solid #4CAF50;
        }
    </style>
</head>
<body>
    <!-- –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º—ñ–≤ -->
    <div id="modeSelector">
        <h4>üîß –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:</h4>
        <button class="mode-btn active" onclick="setMode('triangle')">–¢—Ä–∏–∫—É—Ç–Ω–∏–∫ (3 —Ç–æ—á–∫–∏)</button>
        <button class="mode-btn" onclick="setMode('quadrilateral')">–ß–µ—Ç—ã—Ä–µ—Ö–∫—É—Ç–Ω–∏–∫ (4 —Ç–æ—á–∫–∏)</button>
        <button class="mode-btn" onclick="setMode('pentagon')">–ü'—è—Ç–∏–∫—É—Ç–Ω–∏–∫ (5 —Ç–æ—á–æ–∫)</button>
    </div>

    <!-- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å -->
    <div id="infoPanel">
        <h4 id="infoTitle">–ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏</h4>
        <div id="calculations"></div>
    </div>

    <!-- AR –°—Ü–µ–Ω–∞ -->
    <a-scene 
        vr-mode-ui="enabled: false" 
        arjs="sourceType: webcam; debugUIEnabled: false;"
        renderer="logarithmicDepthBuffer: true;"
        embedded
        style="width: 100%; height: 100%">

        <!-- –°–¢–ê–¢–ò–ß–ù–Ü –ú–ê–†–ö–ï–†–ò –ó –§–û–†–ú–£–õ–ê–ú–ò -->
        
        <!-- –ú–∞—Ä–∫–µ—Ä 1: –¢—Ä–∏–∫—É—Ç–Ω–∏–∫ –∑ —Ñ–æ—Ä–º—É–ª–∞–º–∏ -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-tr.patt" id="triangleMarker">
            <a-entity scale="0.2 0.2 0.2" rotation="-90 0 0" position="0 2 0">
             	<a-text value="–¢–†–ò–ö–£–¢–ù–ò–ö\n\n–ü–ª–æ—â–∞: S = (1/2) √ó a √ó h\n–ü–ª–æ—â–∞ –ì–µ—Ä–æ–Ω–∞: S = ‚àö[p(p-a)(p-b)(p-c)]\n–ü–µ—Ä–∏–º–µ—Ç—Ä: P = a + b + c\n–¢–µ–æ—Ä–µ–º–∞ –ü—ñ—Ñ–∞–≥–æ—Ä–∞: a¬≤ + b¬≤ = c¬≤;
             	" color="black" width="10" position="-0.5 1 -6"
				  font="../fonts/YaHei-msdf.json" negate="false"></a-text>
            </a-entity>
        </a-marker>

        <!-- –ú–∞—Ä–∫–µ—Ä 2: –ö–≤–∞–¥—Ä–∞—Ç –∑ —Ñ–æ—Ä–º—É–ª–∞–º–∏ -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-sq.patt" id="squareMarker"></a>
        		<a-entity scale="0.2 0.2 0.2" rotation="-90 0 0" position="0 2 0">
             	<a-text value="–ß–û–¢–ò–†–ò–ö–£–¢–ù–ò–ö–ò\n\n–ö–≤–∞–¥—Ä–∞—Ç: S = a¬≤\n–ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫: S = a √ó b\n–†–æ–º–±: S = (1/2) √ó d‚ÇÅ √ó d‚ÇÇ\n–ü–∞—Ä–∞–ª–µ–ª–æ–≥—Ä–∞–º: S = a √ó h\n–¢—Ä–∞–ø–µ—Ü—ñ—è: S = (1/2)(a+b) √ó h;
             	" color="black" width="10" position="-0.5 1 -6"
				  font="../fonts/YaHei-msdf.json" negate="false"></a-text>
            </a-entity>
        </a-marker>

        <!-- –ú–∞—Ä–∫–µ—Ä 3: N - –ú–Ω–æ–≥–æ–∫—É—Ç–Ω–∏–∫–∏ -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-n.patt" id="nMarker">
            <a-entity scale="0.2 0.2 0.2" rotation="-90 0 0" position="0 2 0">
                <a-text value="N-–ö–£–¢–ù–ò–ö–ò\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π n-–∫—É—Ç–Ω–∏–∫:\nS = (1/4)n √ó a¬≤ √ó ctg(œÄ/n)\n–°—É–º–∞ –∫—É—Ç—ñ–≤: (n-2) √ó 180¬∞\n–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫—É—Ç: (n-2) √ó 180¬∞/n\n–ó–æ–≤–Ω—ñ—à–Ω—ñ–π –∫—É—Ç: 360¬∞/n;
             	" color="black" width="10" position="-0.5 1 -6"
				  font="../fonts/YaHei-msdf.json" negate="false"></a-text>
            </a-entity>
        </a-marker>

        <!-- –î–ò–ù–ê–ú–Ü–ß–ù–Ü –¢–û–ß–ö–û–í–Ü –ú–ê–†–ö–ï–†–ò (A, B, C, D, G, F) -->
        
        <!-- –¢–æ—á–∫–∞ A -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-letterA.patt" id="pointA">
            <a-sphere id="sphereA" position="0 0.5 0" radius="0.1" material="color: #FF6B35; metalness: 0.8">
                <a-text value="A" position="0 0.3 0" align="center" color="white" scale="2 2 2"></a-text>
            </a-sphere>
        </a-marker>

        <!-- –¢–æ—á–∫–∞ B -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-letterB.patt" id="pointB">
            <a-sphere id="sphereB" position="0 0.5 0" radius="0.1" material="color: #4ECDC4; metalness: 0.8">
                <a-text value="B" position="0 0.3 0" align="center" color="white" scale="2 2 2"></a-text>
            </a-sphere>
        </a-marker>

        <!-- –¢–æ—á–∫–∞ C -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-letterC.patt" id="pointC">
            <a-sphere id="sphereC" position="0 0.5 0" radius="0.1" material="color: #45B7D1; metalness: 0.8">
                <a-text value="C" position="0 0.3 0" align="center" color="white" scale="2 2 2"></a-text>
            </a-sphere>
        </a-marker>

        <!-- –¢–æ—á–∫–∞ D -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-letterD.patt" id="pointD">
            <a-sphere id="sphereD" position="0 0.5 0" radius="0.1" material="color: #96CEB4; metalness: 0.8">
                <a-text value="D" position="0 0.3 0" align="center" color="white" scale="2 2 2"></a-text>
            </a-sphere>
        </a-marker>

        <!-- –¢–æ—á–∫–∞ G -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-letterG.patt" id="pointG">
            <a-sphere id="sphereG" position="0 0.5 0" radius="0.1" material="color: #FFEAA7; metalness: 0.8">
                <a-text value="G" position="0 0.3 0" align="center" color="white" scale="2 2 2"></a-text>
            </a-sphere>
        </a-marker>

        <!-- –¢–æ—á–∫–∞ F -->
        <a-marker preset="custom" type="pattern" url="../markers/pattern-letterF.patt" id="pointF">
            <a-sphere id="sphereF" position="0 0.5 0" radius="0.1" material="color: #DDA0DD; metalness: 0.8">
                <a-text value="F" position="0 0.3 0" align="center" color="white" scale="2 2 2"></a-text>
            </a-sphere>
        </a-marker>

        <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª—ñ–Ω—ñ–π -->
        <a-entity id="linesContainer"></a-entity>

        <a-entity camera></a-entity>
        <a-entity figure-builder></a-entity>
    </a-scene>

    <script>
    
let figureBuilderComponent;

  // –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É (–∑ –∫–Ω–æ–ø–æ–∫)
  function setMode(mode) {
    const btns = document.querySelectorAll('.mode-btn');
    btns.forEach(btn => btn.classList.remove('active'));
    
    // –ê–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    if (mode === 'triangle') btns[0].classList.add('active');
    else if (mode === 'quadrilateral') btns[1].classList.add('active');
    else if (mode === 'pentagon') btns[2].classList.add('active');

    // –ó–º—ñ–Ω—é—î–º–æ requiredIds —É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (!figureBuilderComponent) return;

    if (mode === 'triangle') {
      figureBuilderComponent.setRequiredPoints(['pointA', 'pointB', 'pointC']);
      updateInfoTitle('–†–µ–∂–∏–º: –¢—Ä–∏–∫—É—Ç–Ω–∏–∫ (3 —Ç–æ—á–∫–∏)');
    } else if (mode === 'quadrilateral') {
      figureBuilderComponent.setRequiredPoints(['pointA', 'pointB', 'pointC', 'pointD']);
      updateInfoTitle('–†–µ–∂–∏–º: –ß–æ—Ç–∏—Ä–∏–∫—É—Ç–Ω–∏–∫ (4 —Ç–æ—á–∫–∏)');
    } else if (mode === 'pentagon') {
      figureBuilderComponent.setRequiredPoints(['pointA', 'pointB', 'pointC', 'pointD', 'pointG']);
      updateInfoTitle('–†–µ–∂–∏–º: –ü\'—è—Ç–∏–∫—É—Ç–Ω–∏–∫ (5 —Ç–æ—á–æ–∫)');
    }
  }

  function updateInfoTitle(text) {
    const el = document.getElementById('infoTitle');
    if (el) el.textContent = text;
  }

  AFRAME.registerComponent('figure-builder', {
    init: function () {
      this.detectedPoints = {};
      this.lines = [];
      this.requiredIds = ['pointA', 'pointB', 'pointC']; // –¥–µ—Ñ–æ–ª—Ç
      this.scene = this.el.sceneEl;

      this.setupMarkerTracking();

      figureBuilderComponent = this; // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    },

    setupMarkerTracking: function () {
      this.clearMarkerListeners();
      this.requiredIds.forEach(id => {
        const marker = document.getElementById(id);
        if (marker) {
          marker.addEventListener('markerFound', this.onMarkerFound.bind(this, id));
          marker.addEventListener('markerLost', this.onMarkerLost.bind(this, id));
        }
      });
    },

    clearMarkerListeners: function () {
      // –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–µ –æ—á–∏—â–∞—Ç–∏, –±–æ –º–∞—Ä–∫–µ—Ä–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ
      // –ê–ª–µ —Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Å–ª—É—Ö–∞—á—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    },

    onMarkerFound: function (id) {
      // console.log(`üîµ ${id} –∑–Ω–∞–π–¥–µ–Ω–æ`);
      this.detectedPoints[id] = document.getElementById(id);
      this.updateGeometry();
    },

    onMarkerLost: function (id) {
      // console.log(`‚ö™Ô∏è ${id} –≤—Ç—Ä–∞—á–µ–Ω–æ`);
      delete this.detectedPoints[id];
      this.clearLines();
      this.clearCalculations();
    },

    updateGeometry: function () {
      if (this.requiredIds.every(id => id in this.detectedPoints)) {
        const points = this.requiredIds.map(id => this.getMarkerPosition(this.detectedPoints[id]));
        this.clearLines();
        this.drawLines(points);
        this.calculateProperties(points);
      } else {
        this.clearLines();
        this.clearCalculations();
      }
    },

    getMarkerPosition: function (marker) {
      const pos = new THREE.Vector3();
      marker.object3D.getWorldPosition(pos);
      return pos;
    },

    drawLines: function (points) {
      for (let i = 0; i < points.length; i++) {
        const start = points[i];
        const end = points[(i + 1) % points.length];

        const cylinder = document.createElement('a-entity');
        const distance = start.distanceTo(end);
        const midpoint = new THREE.Vector3().addVectors(start, end).multiplyScalar(0.5);

        const direction = new THREE.Vector3().subVectors(end, start).normalize();
        const quaternion = new THREE.Quaternion();
        quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction);

        cylinder.setAttribute('geometry', `primitive: cylinder; radius: 0.02; height: ${distance}`);
        cylinder.setAttribute('material', 'color: #FF6B35');
        cylinder.object3D.position.copy(midpoint);
        cylinder.object3D.quaternion.copy(quaternion);

        this.scene.appendChild(cylinder);
        this.lines.push(cylinder);
      }
    },

    clearLines: function () {
      this.lines.forEach(line => line.remove());
      this.lines = [];
    },

    calculateProperties: function (points) {
      let perimeter = 0;
      const calculationsEl = document.getElementById('calculations');
      calculationsEl.innerHTML = ''; // –æ—á–∏—â–∞—î–º–æ –ø–∞–Ω–µ–ª—å

      for (let i = 0; i < points.length; i++) {
        const a = points[i];
        const b = points[(i + 1) % points.length];
        const d = a.distanceTo(b);
        perimeter += d;

        const div = document.createElement('div');
        div.className = 'calculation';
        div.textContent = `–î–æ–≤–∂–∏–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∏ ${i + 1}: ${d.toFixed(3)} (–æ–¥.)`;
        calculationsEl.appendChild(div);
      }

      const area = this.computeAreaXZ(points);
      const divArea = document.createElement('div');
      divArea.className = 'calculation';
      divArea.textContent = `–ü–µ—Ä–∏–º–µ—Ç—Ä: ${perimeter.toFixed(3)} (–æ–¥.)\n–ü–ª–æ—â–∞ (–ø—Ä–æ–µ–∫—Ü—ñ—è XZ): ${area.toFixed(3)} (–æ–¥.¬≤)`;
      calculationsEl.appendChild(divArea);
    },

    clearCalculations: function () {
      const calculationsEl = document.getElementById('calculations');
      calculationsEl.innerHTML = '';
    },

    computeAreaXZ: function (pts) {
      let area = 0;
      const n = pts.length;
      for (let i = 0; i < n; i++) {
        const j = (i + 1) % n;
        area += pts[i].x * pts[j].z - pts[j].x * pts[i].z;
      }
      return Math.abs(area / 2);
    },

    setRequiredPoints: function (newIds) {
      // –ó–º—ñ–Ω—é—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏, –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ—é—î–º–æ —Å–ª—É—Ö–∞—á—ñ —Ç–∞ –æ—á–∏—Å—Ç–∫–∞
      this.requiredIds = newIds;
      this.detectedPoints = {};
      this.clearLines();
      this.clearCalculations();
      this.setupMarkerTracking();
    }
  });

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∂–∏–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  window.addEventListener('DOMContentLoaded', () => {
    setMode('triangle');
  });
  
AFRAME.registerComponent('figure-builder', {
    init: function () {
        this.detectedPoints = {};
        this.lines = [];
        this.requiredIds = ['pointA', 'pointB', 'pointC']; // –∑–º—ñ–Ω–∏—à –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ñ—ñ–≥—É—Ä–∏
        this.scene = this.el.sceneEl;

        this.setupMarkerTracking();
    },

    setupMarkerTracking: function () {
        this.requiredIds.forEach(id => {
            const marker = document.getElementById(id);
            if (marker) {
                marker.addEventListener('markerFound', () => {
                    console.log(`üîµ ${id} –∑–Ω–∞–π–¥–µ–Ω–æ`);
                    this.detectedPoints[id] = marker;
                    this.updateGeometry();
                });
                marker.addEventListener('markerLost', () => {
                    console.log(`‚ö™Ô∏è ${id} –≤—Ç—Ä–∞—á–µ–Ω–æ`);
                    delete this.detectedPoints[id];
                    this.clearLines();
                });
            }
        });
    },

    updateGeometry: function () {
        const ids = this.requiredIds;
        if (ids.every(id => id in this.detectedPoints)) {
            const points = ids.map(id => this.getMarkerPosition(this.detectedPoints[id]));
            this.clearLines();
            this.drawLines(points);
            this.calculateProperties(points);
        }
    },

    getMarkerPosition: function (marker) {
        const pos = new THREE.Vector3();
        marker.object3D.getWorldPosition(pos);
        return pos;
    },

    drawLines: function (points) {
        for (let i = 0; i < points.length; i++) {
            const start = points[i];
            const end = points[(i + 1) % points.length]; // –∑–∞–º–∫–Ω–µ–Ω–µ –∫–æ–ª–æ

            const cylinder = document.createElement('a-entity');

            const distance = start.distanceTo(end);
            const midpoint = new THREE.Vector3().addVectors(start, end).multiplyScalar(0.5);

            const direction = new THREE.Vector3().subVectors(end, start).normalize();
            const quaternion = new THREE.Quaternion();
            quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction);

            cylinder.setAttribute('geometry', `primitive: cylinder; radius: 0.02; height: ${distance}`);
            cylinder.setAttribute('material', 'color: #FF6B35');
            cylinder.object3D.position.copy(midpoint);
            cylinder.object3D.quaternion.copy(quaternion);

            this.scene.appendChild(cylinder);
            this.lines.push(cylinder);
        }
    },

    clearLines: function () {
        this.lines.forEach(line => line.remove());
        this.lines = [];
    },

    calculateProperties: function (points) {
        let lengthSum = 0;
        for (let i = 0; i < points.length; i++) {
            const a = points[i];
            const b = points[(i + 1) % points.length];
            const d = a.distanceTo(b);
            lengthSum += d;
            console.log(`üìè –î–æ–≤–∂–∏–Ω–∞ ${i}‚Äì${(i + 1) % points.length}:`, d.toFixed(2));
        }

        let area = this.computeAreaXZ(points);
        console.log(`üìê –ü–µ—Ä–∏–º–µ—Ç—Ä: ${lengthSum.toFixed(2)}\nüìå –ü–ª–æ—â–∞ (–ø—Ä–æ–µ–∫—Ü—ñ—è –Ω–∞ XZ): ${area.toFixed(2)}`);
    },

    computeAreaXZ: function (pts) {
        let area = 0;
        const n = pts.length;
        for (let i = 0; i < n; i++) {
            const j = (i + 1) % n;
            area += pts[i].x * pts[j].z - pts[j].x * pts[i].z;
        }
        return Math.abs(area / 2);
    }
});
</script>
</body>
</html>